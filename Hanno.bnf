grammar Hanno;

program         : block ;
stmt            : stmt_body EOL ;
stmt_body       : definition
                | impl
                | trait
                | annotation
                | expr
                ;

annotation      : NAME "::" type ;
definition      : "let" pattern ( "=" expr | ":=" block "end" ) ;
impl            : "impl" generic_type "<" generic_type ":" { definition <eol> } "end" ;
trait           : "trait" trait_header ":" { annotation <eol> } "end" ;
trait_header    : generic_type [ "<" TYPE_NAME { "," TYPE_NAME } ] ;

expr            : func
                | pair
                | cond
                | match
                | and
                | or
                | not
                | compare
                | equality
                | add_sub_join
                | mod_div_mul
                | exponent
                | negate
                | apply
                ;

func            : "\" pattern "->" expr ;
match           : "match" expr { "|" pattern "->" expr } ;
cond            : "if" and "then" expr "else" expr ;
pair            : expr "," expr ;
and             : expr "and" expr ;
or              : expr "or" expr ;
not             : "not" expr ;
compare         : expr ( ">" | "<" | ">=" | "<=" ) expr ;
equality        : expr ( "=" | "/=" ) expr ;
add_sub_join    : expr ( "+" | "-" | "<>" ) expr ;
mod_div_mul     : expr ( "*" | "/" | "%" ) expr ;
exponent        : expr { "^" expr } ;
negate          : "-" expr ;
apply           : factor { factor } ;

factor          : list
                | group
                | scalar
                | NAME
                ;
list            : "[" [ expr [ "," expr ] [ "," ] ] "]" ;
group           : "(" [ expr ] ")" ;
scalar          : bool
                | FLOAT
                | INTEGER
                | STRING
                ;
bool            : ( "True" | "False" ) ;

block           : { stmt } ;

pattern         : group_pattern [ "," pattern ] ;
group_pattern   : "(" [ pattern ] ")"
                | list_pattern
                ;
list_pattern    : "[" [ group_pattern { "," group_pattern } [ "," ".." NAME ] ] "]"
                | name_pattern
                ;
name_pattern    : [ "^" ] NAME
                | scalar
                ;

type            : pair_type [ "->" type ] ;
pair_type       : group_type [ "," pair_type ] ;
group_type      : "(" type ")"
                | generic_type
                ;
generic_type    : TYPE_NAME [ "[" group_type { "," group_type } "]" ]
                | NAME
                ;

program      : block EOF ;
expr         : definition
             | func
             | pair
             | cond
             | match
             | and
             | or
             | not
             | compare
             | equality
             | add_sub_join
             | mod_div_mul
             | exponent
             | negate
             | apply
             | dot
             | list
             | group
             | scalar
             ;

definition   : "let" pattern ( "=" expr | ":=" block "end" ) ;
func         : "\" parameters "->" expr ;
match        : "match" expr { "|" pattern "->" expr } ;
cond         : "if" and "then" expr "else" expr ;
pair         : expr "," expr ;
and          : expr "and" expr ;
or           : expr "or" expr ;
not          : "not" expr ;
compare      : expr ( ">" | "<" | ">=" | "<=" ) expr ;
equality     : expr ( "=" | "/=" ) expr ;
add_sub_join : expr ( "+" | "-" | "<>" ) expr ;
mod_div_mul  : expr ( "*" | "/" | "%" ) expr ;
exponent     : expr { "^" expr } ;
negate       : "-" expr ;
apply        : expr { "(" expr { "," expr } [ "," ] ")" } ;
dot          : expr { "." NAME } ;
list         : "[" [ expr [ "," expr ] [ "," ] ] "]" ;
group        : "(" [ expr ] ")" ;
scalar       : bool
             | FLOAT
             | INTEGER
             | NAME
             | STRING
             ;
bool         : "True" | "False" ;

block        : { expr EOL } ;
body_clause  : "=" expr
             | ":=" block "end"
             ;
parameters   : NAME [ ":" type ] { "," NAME [ ":" type ] } [ "," ] ;
/* NOTE: Functions must have at least 1 parameter. */

type         : arrow_type ;
arrow_type   : tuple_type [ "->" arrow_type ] ;
tuple_type   : "(" [ type { "," type } [ "," ] ] ")"
             | generic
             ;
generic      : NAME [ "[" type { "," type } [ "," ] "]" ] ;

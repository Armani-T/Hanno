grammar Hasdrubal ;

program      = { expr EOL } ;
expr         = definition ;
definition   = "let" NAME [ "(" parameters ")" ] body_clause
             | pipe
             ;
pipe         = func [ "|>" pipe ] ;
func         = "\" parameters "->" func
             | cond
             ;
cond         = "if" and "then" cond "else" cond
             | and
             ;
and          = or [ "and" and ] ;
or           = not [ "or" or ] ;
not          = "not" not
             | compare
             ;
compare      = add_sub_join [ ( ">" | "<" | ">=" | "<=" | "=" | "/=" ) compare ] ;
add_sub_join = mod_div_mul [ ( "+" | "-" | "<>" ) add_sub_join ] ;
mod_div_mul  = exponent [ ( "*" | "/" | "%" ) mod_div_mul ] ;
exponent     = negate { "^" negate } ;
negate       = "-" negate
             | apply
             ;
apply        = list { "(" expr { "," expr } [ "," ] ")" } ;
list         = "[" [ expr [ "," expr ] [ "," ] ] "]"
             | tuple
             ;
tuple        = "(" [ expr { "," expr } [ "," ] ] ")"
             | scalar
             ;
scalar       = bool
             | FLOAT
             | INTEGER
             | STRING
             ;
bool         = "True"
             | "False"
             ;

body_clause  = "=" expr [ in_clause ]
             | ":=" { expr EOL } ( "end" | in_clause )
             ;
in_clause    = "in" ":" { expr EOL } "end"
             | "in" expr
             ;
parameters   = NAME { "," NAME } [ "," ] ;  (* Functions must have at least 1 parameter. *)

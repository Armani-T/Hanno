program         : block EOF ;
expr            : definition
                | func
                | pair
                | cond
                | match
                | and
                | or
                | not
                | compare
                | equality
                | add_sub_join
                | mod_div_mul
                | exponent
                | negate
                | apply
                | dot
                | list
                | group
                | scalar
                ;

definition      : "let" pattern ( "=" expr | ":=" block "end" ) ;
func            : "\" pattern "->" expr ;
match           : "match" expr { "|" pattern "->" expr } ;
cond            : "if" and "then" expr "else" expr ;
pair            : expr "," expr ;
and             : expr "and" expr ;
or              : expr "or" expr ;
not             : "not" expr ;
compare         : expr ( ">" | "<" | ">=" | "<=" ) expr ;
equality        : expr ( "=" | "/=" ) expr ;
add_sub_join    : expr ( "+" | "-" | "<>" ) expr ;
mod_div_mul     : expr ( "*" | "/" | "%" ) expr ;
exponent        : expr { "^" expr } ;
negate          : "-" expr ;
apply           : factor { factor } ;

factor          : list
                | group
                | scalar
                | NAME
                ;
list            : "[" [ expr [ "," expr ] [ "," ] ] "]" ;
group           : "(" [ expr ] ")" ;
scalar          : bool
                | FLOAT
                | INTEGER
                | STRING
                ;
bool            : ( "True" | "False" ) ;

block           : { expr EOL } ;
body_clause     : "=" expr
                | ":=" block "end"
                ;

pattern         : factor_pattern [ "," pattern ] ;
factor_pattern  : group_pattern
                | list_pattern
                | name_pattern
                | scalar
                ;
group_pattern   : "(" [ pattern ] ")" ;
list_pattern    : "[" [ factor_pattern { "," factor_pattern } [ "," ".." NAME ] ] "]" ;
name_pattern    : "^" NAME
                | NAME { factor_pattern }  /* For matching constructor calls. */
                ;

grammar Hasdrubal ;

program     = { expr EOL } ;
expr        = definition ;
definition  = "let" NAME "=" expr [ "in" expr ]
            | pipe
            ;
pipe        = func [ "|>" pipe ] ;
func        = "\" NAME { "," NAME } [ "," ] "->" func
              (* Functions must have at least 1 arg. *)
            | cond
            ;
cond        = "if" and "then" cond "else" cond
              (* Both clauses are mandatory. *)
            | and
            ;
and         = or [ "and" and ] ;
or          = not [ "or" or ] ;
not         = "not" not
            | compare
            ;
compare     = add_sub_con [ ( ">" | "<" | ">=" | "<=" | "=" | "/=" ) compare ] ;
add_sub_con = mod_div_mul [ ( "<>" | "+" | "-" ) add_sub_con ] ;
mod_div_mul = exponent [ ( "*" | "/" | "%" ) mod_div_mul ] ;
exponent    = negate { "^" negate } ;
negate      = "-" negate
            | call
            ;
call        = list [ tuple ] ;
list        = "[" [ expr [ "," expr ] [ "," ] ] "]"
            | tuple
            ;
tuple       = "(" [ expr { "," expr } [ "," ] ] ")"
            | scalar
            ;
scalar      = bool
            | FLOAT
            | INTEGER
            | NAME
            | STRING
            ;
bool        = "True"
            | "False"
            ;
